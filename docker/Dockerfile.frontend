# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  1. Build stage  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
FROM node:20 AS build


ARG VITE_API_URL=/api
ENV VITE_API_URL=${VITE_API_URL}

WORKDIR /ui

# deterministic install
COPY offline-llm-ui/package*.json ./
RUN npm install


# copy source & build
COPY offline-llm-ui/ ./
RUN npm run build          # â†’ /ui/dist

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. Runtime stage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
FROM nginx:1.25-alpine AS stage-1

RUN rm -f /etc/nginx/conf.d/default.conf
COPY docker/nginx.conf /etc/nginx/nginx.conf

# ðŸ”§ Add this line
RUN apk add --no-cache openssl

# Add certs (will be overwritten later if mounted)
COPY certs/ /etc/nginx/certs/

RUN mkdir -p /etc/nginx/certs && \
    if [ ! -f /etc/nginx/certs/key.pem ] || [ ! -f /etc/nginx/certs/cert.pem ]; then \
        echo "ðŸ”’  generating self-signed TLS cert (localhost)" && \
        openssl req -x509 -nodes -subj "/CN=localhost" \
            -newkey rsa:2048 -days 365 \
            -keyout /etc/nginx/certs/key.pem \
            -out    /etc/nginx/certs/cert.pem ; \
    fi


EXPOSE 443
CMD ["nginx", "-g", "daemon off;"]
